
I'm going to be trying out a MVC pattern for this project. This separates the 
program into 3 main chunks: Model, View, and Controller.

Model:
	This is the underlying data structures the program will use to accomplish
	it's goals. For this program, it will consist of the User class and few
	other classes that help it track data. Let's take a look at the User class
	and it's helper classes Deck, Matchup, and Stats.

	User:
		properties
			String name
		methods
			Deck getDeck(hero,deckname)
			Deck [] getDecksByHero(hero)
			Deck [] getAllDecks()
			User rename(newname)
			int compare(user)


	Deck:
		properties
			String hero
			String name
			Stats stats
		methods
			Deck victory(hero,deckname)
			Deck defeat(hero,deckname)

			Matchup addMatchup(hero,deckname)
			Deck removeMatchup(hero,deckname)
			
			Matchup getMatchup(hero,deckname)
			Matchup [] getAllMatchups()
			Matchup [] getMatchupsByHero(hero)

			Deck rename(newname)
			int compare(deck)

	Matchup:
		properties
			String hero
			String name
			int games
			int wins
		methods
			Matchup victory()
			Matchup defeat()
			
			Matchup set(games,wins)
			Matchup reset()

			Matchup rename(newname)
			int compare(matchup)

	Stats:
		properties
			{} games -- index by all or by hero
			{} wins  -- index by all or by hero
		methods
			victory(hero)
			defeat(hero)
			update()
			reset()
			setHero(hero,games,wins)

View:
	Passes input to controller, displays what controller tells it to display.

	View:
		properties
			UserPanel
			DeckPanel
			HeroPanel
			DisplayPanel
		methods
			displayUsers(userArray)
			displayDecks(user)
			displayMatchups(user,deck,hero)
			focusMatchup(user,deck,hero,matchup)
			displayError(message)

Controller
	Receives signals from View telling it to modify the model objects. Tracks 
	program state and tells View what it should be displaying at any given
	time.

	Controller:
		properties:
			User [] users
			User activeUser
			Deck activeDeck
			Matchup activeMatchup
		methods:
			selectUser(user)
			addUser(user)

			selectDeck(hero,deck)
			addDeck(hero,deck)
			
			selectMatchup(hero,deck)
			addMatchup(hero,deck)

			logVictory();
			logDefeat();

			saveData()
			loadData()


	


